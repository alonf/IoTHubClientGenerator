********************************************************************************

using IoTHubClientGeneratorSDK;
using System;

namespace TestTwoIoTHubsGeneration
{
    [IoTHub(GeneratedSendMethodName = "SendTelemetry")]
    partial class MyIoTHubClient1
    {
        
    }
    [IoTHub()]
    partial class MyIoTHubClient2
    {
        
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using IoTHubClientGeneratorSDK;

namespace TestTwoIoTHubsGeneration
{
    public partial class MyIoTHubClient1
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            DeviceClient = CreateDeviceClient();
        }

        [Device(ConnectionString = "%ConnectionString%")]
        private DeviceClient DeviceClient { get; set; }

        private Microsoft.Azure.Devices.Client.DeviceClient CreateDeviceClient()
        {
            var theConnectionString = System.Environment.GetEnvironmentVariable("ConnectionString");
            var deviceClient = DeviceClient.CreateFromConnectionString(theConnectionString);
            return deviceClient;
        }

        private async Task<bool> SendTelemetry(string jsonPayload, string messageId, System.Threading.CancellationToken cancellationToken, System.Collections.Generic.IDictionary<string, string> messageProperties = null)
        {
            var iotMessage = new Microsoft.Azure.Devices.Client.Message(System.Text.Encoding.UTF8.GetBytes(jsonPayload))
            {MessageId = messageId, ContentEncoding = System.Text.Encoding.UTF8.ToString(), ContentType = "application/json"};
            await DeviceClient.SendEventAsync(iotMessage, cancellationToken);
            iotMessage.Dispose();
            return true;
        }
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using IoTHubClientGeneratorSDK;

namespace TestTwoIoTHubsGeneration
{
    public partial class MyIoTHubClient2
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            DeviceClient = CreateDeviceClient();
        }

        [Device(ConnectionString = "%ConnectionString%")]
        private DeviceClient DeviceClient { get; set; }

        private Microsoft.Azure.Devices.Client.DeviceClient CreateDeviceClient()
        {
            var theConnectionString = System.Environment.GetEnvironmentVariable("ConnectionString");
            var deviceClient = DeviceClient.CreateFromConnectionString(theConnectionString);
            return deviceClient;
        }
    }
}


