********************************************************************************

using IoTHubClientGeneratorSDK;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Client.Transport.Mqtt;
using Microsoft.Azure.Devices.Client.Exceptions;
using System;

namespace TestDPSSymmetricKey
{
    [IoTHub]
    partial class MyIoTHubClient
    {
        [DpsSymmetricKeyDevice(DPSIdScope="%DpsScopeId%", Id="1", 
            EnrollmentType=DPSEnrollmentType.Individual, DPSTransportType=TransportType.Mqtt,
            PrimarySymmetricKey="%PrimaryDPSKey%")]
        private DeviceClient MyClient {get;set;}

        [IoTHubErrorHandler]
        void IoTHubErrorHandler(string errorMessage, Exception exception)
        {
            if (exception is IotHubException {IsTransient: true})
            {
                System.Console.WriteLine($"Error: {errorMessage}");
                System.Console.WriteLine($"An IotHubException was caught, but will try to recover and retry: {exception}");
            }
        }

        [TransportSetting]
        public ITransportSettings AmqpTransportSettings { get; } = new AmqpTransportSettings(TransportType.Amqp)
        {
            AmqpConnectionPoolSettings = new AmqpConnectionPoolSettings {MaxPoolSize = 5},
            IdleTimeout = TimeSpan.FromMinutes(1)
        };
        
        [ClientOptions]
        public ClientOptions ClientOptions { get; } = new();

        [TransportSetting]
        public ITransportSettings MqttTransportSetting { get; } = new MqttTransportSettings(TransportType.Mqtt)
        {
            DefaultReceiveTimeout = TimeSpan.FromMinutes(2)
        };
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using Microsoft.Azure.Devices.Provisioning.Client.Transport;
using System.Security.Cryptography;
using Microsoft.Azure.Devices.Provisioning.Client;
using IoTHubClientGeneratorSDK;

namespace TestDPSSymmetricKey
{
    public partial class MyIoTHubClient
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            try
            {
                MyClient = await CreateMyClientAsync();
            }
            catch (System.Exception exception)
            {
                string errorMessage = "Error initiating device client";
                IoTHubErrorHandler(errorMessage, exception);
            }
        }

        private async Task<Microsoft.Azure.Devices.Client.DeviceClient> CreateMyClientAsync()
        {
            var theDPSIdScope = System.Environment.GetEnvironmentVariable("DpsScopeId");
            var theId = "1";
            var theEnrollmentType = DPSEnrollmentType.Individual;
            var theDPSTransportType = TransportType.Mqtt;
            var thePrimarySymmetricKey = System.Environment.GetEnvironmentVariable("PrimaryDPSKey");
            ITransportSettings[] transportSettings = new[]{AmqpTransportSettings, MqttTransportSetting};
            using var security = new SecurityProviderSymmetricKey(theId, thePrimarySymmetricKey, null);
            using var transport = new ProvisioningTransportHandlerMqtt();
            var theGlobalDeviceEndpoint = "global.azure-devices-provisioning.net";
            ProvisioningDeviceClient provClient = ProvisioningDeviceClient.Create(theGlobalDeviceEndpoint, theDPSIdScope, security, transport);
            DeviceRegistrationResult result = await provClient.RegisterAsync();
            if (result.Status != ProvisioningRegistrationStatusType.Assigned)
            {
                throw new Exception($"Registration status did not assign a hub, status: {result.Status}");
            }

            IAuthenticationMethod auth = new DeviceAuthenticationWithRegistrySymmetricKey(result.DeviceId, security.GetPrimaryKey());
            var deviceClient = DeviceClient.Create(result.AssignedHub, auth, transportSettings, ClientOptions);
            return deviceClient;
        }

        private static string ComputeDerivedSymmetricKey(string enrollmentKey, string deviceId)
        {
            if (string.IsNullOrWhiteSpace(deviceId))
            {
                return enrollmentKey; //individual enrollment type
            }

            using var hmac = new System.Security.Cryptography.HMACSHA256(System.Convert.FromBase64String(enrollmentKey));
            return Convert.ToBase64String(hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(deviceId)));
        }
    }
}


