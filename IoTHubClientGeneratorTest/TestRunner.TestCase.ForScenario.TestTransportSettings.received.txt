IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(26,20): error CS0103: The name 'deviceClient' does not exist in the current context
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(1,1): hidden CS8019: Unnecessary using directive.
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(7,1): hidden CS8019: Unnecessary using directive.
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(6,1): hidden CS8019: Unnecessary using directive.
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(4,1): hidden CS8019: Unnecessary using directive.
(2,1): hidden CS8019: Unnecessary using directive.
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(2,1): hidden CS8019: Unnecessary using directive.

********************************************************************************

using IoTHubClientGeneratorSDK;
using Microsoft.Azure.Devices.Client;
using System;
using Microsoft.Azure.Devices.Client.Transport.Mqtt;

namespace TestTransportSettings
{
    [IoTHub()]
    partial class MyIoTHubClient
    {
        [TransportSetting]
        public ITransportSettings AmqpTransportSettings { get; } = new AmqpTransportSettings(TransportType.Amqp)
        {
            AmqpConnectionPoolSettings = new AmqpConnectionPoolSettings {MaxPoolSize = 5},
            IdleTimeout = TimeSpan.FromMinutes(1)
        };

        [TransportSetting]
        public ITransportSettings MqttTransportSetting { get; } = new MqttTransportSettings(TransportType.Mqtt)
        {
            DefaultReceiveTimeout = TimeSpan.FromMinutes(2)
        };
        [Device(ConnectionString="%ConStr%")]
        private DeviceClient MyClient {get;set;}
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using IoTHubClientGeneratorSDK;

namespace TestTransportSettings
{
    public partial class MyIoTHubClient
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            MyClient = CreateMyClient();
        }

        private Microsoft.Azure.Devices.Client.DeviceClient CreateMyClient()
        {
#pragma warning disable CS4014
            var theConnectionString = System.Environment.GetEnvironmentVariable("ConStr");
#pragma warning restore CS4014
            ITransportSettings[] transportSettings = new[]{AmqpTransportSettings, MqttTransportSetting};
            var deviceClient1 = DeviceClient.CreateFromConnectionString(theConnectionString, transportSettings);
            return deviceClient;
        }
    }
}


