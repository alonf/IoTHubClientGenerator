IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(26,20): error CS0103: The name 'deviceClient' does not exist in the current context
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(2,1): hidden CS8019: Unnecessary using directive.
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(1,1): hidden CS8019: Unnecessary using directive.
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(4,1): hidden CS8019: Unnecessary using directive.
(3,1): hidden CS8019: Unnecessary using directive.
IoTHubClientGenerator\IoTHubClientGenerator.Generator\MyIoTHubClientExtension.IoTHub.g.cs(6,1): hidden CS8019: Unnecessary using directive.
(2,1): hidden CS8019: Unnecessary using directive.

********************************************************************************

using IoTHubClientGeneratorSDK;
using System;

namespace TestReportedProperties
{
    [IoTHub()]
    partial class MyIoTHubClient
    {
        [Reported("valueFromTheDevice")] private string _reportedPropertyDemo;

        [Reported("ReportedPropertyAutoNameDemo", "reportedPropertyAutoNameDemo")] private string _reportedPropertyAutoNameDemo;
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using IoTHubClientGeneratorSDK;

namespace TestReportedProperties
{
    public partial class MyIoTHubClient
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            DeviceClient = CreateDeviceClient();
        }

        [Device(ConnectionString = "%ConnectionString%")]
        private DeviceClient DeviceClient { get; set; }

        private Microsoft.Azure.Devices.Client.DeviceClient CreateDeviceClient()
        {
            var theConnectionString = System.Environment.GetEnvironmentVariable("ConnectionString");
            var deviceClient1 = DeviceClient.CreateFromConnectionString(theConnectionString);
            return deviceClient;
        }

        private void ReportProperty<T>(string propertyName, T data)
        {
            var reportedProperties = new Microsoft.Azure.Devices.Shared.TwinCollection();
            reportedProperties[propertyName] = data.ToString();
            System.Threading.Tasks.Task.Run(async () => await DeviceClient.UpdateReportedPropertiesAsync(reportedProperties));
        }

        public string valueFromTheDevice
        {
            get
            {
                return _reportedPropertyDemo;
            }

            set
            {
                _reportedPropertyDemo = value;
                ReportProperty("valueFromTheDevice", value);
            }
        }

        public string ReportedPropertyAutoNameDemo
        {
            get
            {
                return _reportedPropertyAutoNameDemo;
            }

            set
            {
                _reportedPropertyAutoNameDemo = value;
                ReportProperty("reportedPropertyAutoNameDemo", value);
            }
        }
    }
}


