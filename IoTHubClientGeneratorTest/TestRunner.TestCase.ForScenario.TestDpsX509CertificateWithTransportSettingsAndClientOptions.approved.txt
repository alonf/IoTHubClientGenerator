********************************************************************************

using IoTHubClientGeneratorSDK;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Client.Transport.Mqtt;
using System;

namespace TestDpsX509Certificate
{
    [IoTHub]
    partial class MyIoTHubClient
    {
        [DpsX509CertificateDevice(DPSIdScope="%DpsScopeId%", Id="1", 
            EnrollmentType=DPSEnrollmentType.Individual, DPSTransportType=TransportType.Mqtt,
            CertificatePath="%certificateFilePath%", CertificatePassword="%CertPassword%")]
        private DeviceClient MyClient {get;set;}

        [TransportSetting]
        public ITransportSettings AmqpTransportSettings { get; } = new AmqpTransportSettings(TransportType.Amqp)
        {
            AmqpConnectionPoolSettings = new AmqpConnectionPoolSettings {MaxPoolSize = 5},
            IdleTimeout = TimeSpan.FromMinutes(1)
        };
        
        [ClientOptions]
        public ClientOptions ClientOptions { get; } = new();

        [TransportSetting]
        public ITransportSettings MqttTransportSetting { get; } = new MqttTransportSettings(TransportType.Mqtt)
        {
            DefaultReceiveTimeout = TimeSpan.FromMinutes(2)
        };
    }
}


********************************************************************************
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.Devices.Client;
using Microsoft.Azure.Devices.Shared;
using Microsoft.Azure.Devices.Provisioning.Client.Transport;
using System.Security.Cryptography;
using Microsoft.Azure.Devices.Provisioning.Client;
using System.Security.Cryptography.X509Certificates;
using IoTHubClientGeneratorSDK;

namespace TestDpsX509Certificate
{
    public partial class MyIoTHubClient
    {
        public async Task InitIoTHubClientAsync()
        {
            await System.Threading.Tasks.Task.CompletedTask; //suppress async warning in case we don't generate any async call
            MyClient = await CreateMyClientAsync();
        }

        private async Task<Microsoft.Azure.Devices.Client.DeviceClient> CreateMyClientAsync()
        {
            var theDPSIdScope = System.Environment.GetEnvironmentVariable("DpsScopeId");
            var theId = "1";
            var theEnrollmentType = DPSEnrollmentType.Individual;
            var theDPSTransportType = TransportType.Mqtt;
            var theCertificatePath = System.Environment.GetEnvironmentVariable("certificateFilePath");
            var theCertificatePassword = System.Environment.GetEnvironmentVariable("CertPassword");
            ITransportSettings[] transportSettings = new[]{AmqpTransportSettings, MqttTransportSetting};
            using System.Security.Cryptography.X509Certificates.X509Certificate2 certificate = LoadProvisioningCertificate(theCertificatePath, theCertificatePassword);
            using var security = new Microsoft.Azure.Devices.Shared.SecurityProviderX509Certificate(certificate);
            using var transport = new ProvisioningTransportHandlerMqtt();
            var theGlobalDeviceEndpoint = "global.azure-devices-provisioning.net";
            ProvisioningDeviceClient provClient = ProvisioningDeviceClient.Create(theGlobalDeviceEndpoint, theDPSIdScope, security, transport);
            DeviceRegistrationResult result = await provClient.RegisterAsync();
            if (result.Status != ProvisioningRegistrationStatusType.Assigned)
            {
                throw new Exception($"Registration status did not assign a hub, status: {result.Status}");
            }

            IAuthenticationMethod auth = new Microsoft.Azure.Devices.Client.DeviceAuthenticationWithX509Certificate(result.DeviceId, certificate);
            var deviceClient = DeviceClient.Create(result.AssignedHub, auth, transportSettings, ClientOptions);
            return deviceClient;
        }

        private System.Security.Cryptography.X509Certificates.X509Certificate2 LoadProvisioningCertificate(string certificatePath, string certificatePassword)
        {
            var certificateCollection = new System.Security.Cryptography.X509Certificates.X509Certificate2Collection();
            certificateCollection.Import(certificatePath, certificatePassword, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.UserKeySet);
            System.Security.Cryptography.X509Certificates.X509Certificate2 certificate = null;
            foreach (var element in certificateCollection)
            {
                if (certificate == null && element.HasPrivateKey)
                {
                    certificate = element;
                }
                else
                {
                    element.Dispose();
                }
            }

            if (certificate == null)
            {
                throw new System.IO.FileNotFoundException($"{certificatePath} did not contain any certificate with a private key.");
            }

            return certificate;
        }
    }
}


